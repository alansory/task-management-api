// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique @db.VarChar(150)
  name       String?  @db.VarChar(100)
  username   String   @db.VarChar(100)
  password   String   @db.VarChar(100)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  
  userRoles  UserRole[] @relation("UserToUserRoles")
  tasks       Task[]        @relation("CreatedTasks")
  assignedTasks Task[]      @relation("AssignedTasks")
  comments    Comment[]
  notifications Notification[]

  @@map("users")
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(50)
  description String?    @db.VarChar(255)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  userRoles   UserRole[] @relation("RoleToUserRoles")

  @@map("roles")
}

model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  roleId    Int      @map("role_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  user      User     @relation(fields: [userId], references: [id], name: "UserToUserRoles", map: "user_roles_user_id_fkey")
  role      Role     @relation(fields: [roleId], references: [id], name: "RoleToUserRoles", map: "user_roles_role_id_fkey")


  @@map("user_roles")
  @@unique([userId, roleId])
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(100)
  description String?   @db.Text
  creatorId   Int       @map("creator_id")
  assigneeId  Int?      @map("assignee_id")
  status      TaskStatus @default(TO_DO)
  dueDate     DateTime?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  creator     User      @relation("CreatedTasks", fields: [creatorId], references: [id])
  assignee    User?     @relation("AssignedTasks", fields: [assigneeId], references: [id])
  comments    Comment[]
  notifications Notification[]

  @@map("tasks")
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String    @db.Text
  userId    Int       @map("user_id")
  taskId    Int       @map("task_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  user      User      @relation(fields: [userId], references: [id])
  task      Task      @relation(fields: [taskId], references: [id])

  @@map("comments")
}

model Notification {
  id        Int       @id @default(autoincrement())
  type      NotificationType
  message   String    @db.Text
  userId    Int       @map("user_id")
  taskId    Int?      @map("task_id")
  createdAt DateTime  @default(now()) @map("created_at")
  readAt    DateTime?

  user      User      @relation(fields: [userId], references: [id])
  task      Task?     @relation(fields: [taskId], references: [id])

  @@map("notifications")
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  DONE
}

enum NotificationType {
  TASK_ASSIGNED
  COMMENT_ADDED
}